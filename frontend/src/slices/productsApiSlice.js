import { PRODUCTS_URL, UPLOAD_URL } from "../constants";
import { apiSlice } from "./apiSlice";

// Create API slice for managing products and product-related actions
export const productApiSlice = apiSlice.injectEndpoints({
  endpoints: (builder) => ({
    // Query to fetch a list of products with optional search keyword and pagination
    getProducts: builder.query({
      query: ({ pageNumber, keyword }) => ({
        url: PRODUCTS_URL, // GET request to fetch products
        params: { keyword, pageNumber }, // Query parameters for filtering and pagination
      }),
      providesTags: ["Products"], // Mark as dependent on "Products" tag
      keepUnusedDataFor: 5, // Keep data in cache for 5 seconds before refetching
    }),

    // Query to fetch details of a specific product by product ID
    getProductDetails: builder.query({
      query: (productId) => ({ url: `${PRODUCTS_URL}/${productId}` }), // GET request to fetch product details
      keepUnusedDataFor: 5, // Keep data in cache for 5 seconds before refetching
    }),

    // Mutation to create a new product
    createProduct: builder.mutation({
      query: () => ({
        url: PRODUCTS_URL, // POST request to create a new product
        method: "POST",
      }),
      invalidatesTags: ["Product"], // Invalidate "Product" tag to refetch relevant data
    }),

    // Mutation to update an existing product
    updateProduct: builder.mutation({
      query: (data) => ({
        url: `${PRODUCTS_URL}/${data.productId}`, // PUT request to update a product
        method: "PUT",
        body: data, // Pass the updated product data in the request body
      }),
      invalidatesTags: ["Products"], // Invalidate "Products" tag to refresh the product list
    }),

    // Mutation to upload a product image
    uploadProductImage: builder.mutation({
      query: (data) => ({
        url: `${UPLOAD_URL}`, // POST request to upload a product image
        method: "POST",
        body: data, // Pass the image data in the request body
      }),
    }),

    // Mutation to delete a product by product ID
    DeleteProduct: builder.mutation({
      query: (productId) => ({
        url: `${PRODUCTS_URL}/${productId}`, // DELETE request to remove a product by its ID
        method: "DELETE",
      }),
    }),

    // Mutation to create a product review
    createReview: builder.mutation({
      query: (data) => ({
        url: `${PRODUCTS_URL}/${data.productId}/review`, // POST request to submit a review for a product
        method: "POST",
        body: data, // Pass review data in the request body
      }),
      invalidatesTags: ["Product"], // Invalidate "Product" tag to refresh product details
    }),

    // Query to fetch the top-rated products
    getTopProducts: builder.query({
      query: () => ({
        url: `${PRODUCTS_URL}/top`, // GET request to fetch top-rated products
      }),
      keepUnusedDataFor: 5, // Keep data in cache for 5 seconds before refetching
    }),
  }),
});

// Export hooks for each API action (query and mutation) generated by `createApi`
export const {
  useGetProductsQuery, // Hook for fetching products
  useGetTopProductsQuery, // Hook for fetching top-rated products
  useGetProductDetailsQuery, // Hook for fetching product details
  useCreateProductMutation, // Hook for creating a new product
  useUpdateProductMutation, // Hook for updating an existing product
  useUploadProductImageMutation, // Hook for uploading a product image
  useDeleteProductMutation, // Hook for deleting a product
  useCreateReviewMutation, // Hook for submitting a product review
} = productApiSlice;
