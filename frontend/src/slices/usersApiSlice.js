import { apiSlice } from "./apiSlice.js";
import { USERS_URL } from "../constants.js";

// Create API slice for managing user-related actions
export const usersApiSLice = apiSlice.injectEndpoints({
  endpoints: (builder) => ({
    // Mutation to handle user login
    login: builder.mutation({
      query: (data) => ({
        url: `${USERS_URL}/auth`, // POST request for user authentication
        method: "POST",
        body: data, // Pass user credentials in the request body
      }),
    }),

    // Mutation to handle user registration
    register: builder.mutation({
      query: (data) => ({
        url: USERS_URL, // POST request to register a new user
        method: "POST",
        body: data, // Pass registration data in the request body
      }),
    }),

    // Mutation to handle user logout
    logout: builder.mutation({
      query: () => ({
        url: `${USERS_URL}/logout`, // POST request to log out the user
        method: "POST",
      }),
    }),

    // Mutation to update user profile information
    profile: builder.mutation({
      query: (data) => ({
        url: `${USERS_URL}/profile`, // PUT request to update user profile data
        method: "PUT",
        body: data, // Pass the updated profile data in the request body
      }),
    }),

    // Query to fetch all users (admin-level access)
    getUsers: builder.query({
      query: () => ({
        url: USERS_URL, // GET request to fetch all users
      }),
      providesTags: ["Users"], // Provides a cache tag for users' data
      keepUnusedDataFor: 5, // Keep the data in cache for 5 seconds before refetching
    }),

    // Mutation to delete a user by their ID
    deleteUser: builder.mutation({
      query: (userId) => ({
        url: `${USERS_URL}/${userId}`, // DELETE request to remove a user by ID
        method: "DELETE",
      }),
    }),

    // Query to fetch the details of a single user by user ID
    getUserDetails: builder.query({
      query: (userId) => ({
        url: `${USERS_URL}/${userId}`, // GET request to fetch details of a specific user
      }),
      keepUnusedDataFor: 5, // Keep data in cache for 5 seconds before refetching
    }),

    // Mutation to update an existing user by their ID
    updateUser: builder.mutation({
      query: (data) => ({
        url: `${USERS_URL}/${data.userId}`, // PUT request to update user data by ID
        method: "PUT",
        body: data, // Pass the updated user data in the request body
      }),
      invalidatesTags: ["User"], // Invalidate "User" tag to refresh user data
    }),
  }),
});

// Export hooks for each API action (query and mutation) generated by `createApi`
export const {
  useLoginMutation, // Hook for user login
  useRegisterMutation, // Hook for user registration
  useProfileMutation, // Hook for updating user profile
  useLogoutMutation, // Hook for user logout
  useGetUsersQuery, // Hook for fetching all users (admin only)
  useDeleteUserMutation, // Hook for deleting a user by ID
  useGetUserDetailsQuery, // Hook for fetching a single user's details
  useUpdateUserMutation, // Hook for updating an existing user
} = usersApiSLice;
